"""
Django settings for CO2_VEKIN project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import sys
from datetime import timedelta
import redis
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# CO2_CHAIN_API_URL = os.environ.get('CO2_CHAIN_API_URL', None)
# CO2_CHAIN_API_KEY = os.environ.get('CO2_CHAIN_API_KEY', None)

CO2_CHAIN_API_URL = os.environ.get('CO2_CHAIN_API_URL', 'https://co2-chain-api-dev.vekin.co.th/v1/')
CO2_CHAIN_API_KEY = os.environ.get('CO2_CHAIN_API_KEY', '5621a41f8aa0f88734eb1f28a08c59c74a76cefc131e52122323aa148f20713e')

CO2_WEB_URL = os.environ.get('CO2_WEB_URL', 'https://co2-web-dev.vekin.co.th')
CO2_API_URL = os.environ.get('CO2_API_URL', 'https://co2-api-dev.vekin.co.th')

# PROMPTPAY_ACCOUNT = os.environ.get('PROMPTPAY_ACCOUNT', None)
PROMPTPAY_ACCOUNT = "0105553145553"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/hswto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.environ.get('SECRET_KEY', '_!!$tcz3b2^j2h2j&4pf1x3qlvdz^oi$@u!c3zyrb+(+q_iw76'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get('DEBUG', 1)))

DOMAIN_BASE = os.environ.get('DOMAIN_BASE', '')
API_PATH_PREFIX = os.environ.get('API_PATH_PREFIX', '')

ALLOWED_HOSTS = ['*']
CORS_ORIGIN_ALLOW_ALL = True

# Application definition
INSTALLED_APPS = [
    'rest_framework',
    'rest_framework_swagger',
    'django_celery_beat',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_cron',
    'django_crontab',

    'django_filters',
    'drf_yasg',
    'account',
    'alert',
    'activity',
    'analytic',
    'channels',
    'config',

    'console',

    'corsheaders',
    'inbox',
    'log',
    'mailer',
    'term',
    'transaction',
    'fcm_django',
    'notification_template',
    'scb_pg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',

    'co2.middleware.LoggingMiddleware',
]

ROOT_URLCONF = 'co2.urls'
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

X_FRAME_OPTIONS = 'SAMEORIGIN'
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


ADMINS = (
    ('Oue', 'ekasit@vekin.co.th')
)

EMAIL_SUBJECT_PREFIX = '[Default settings!!] '
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'noreply@vekin.co.th'
EMAIL_HOST_PASSWORD= 'cd3f7fa1caa83fd4cb28a4e8af293302'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_AUTH = True
EMAIL_SERVICE = 'SMTP'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = False
SESSION_COOKIE_SECURE = True
# SESSION_COOKIE_SAMESITE = "None"
SESSION_COOKIE_HTTPONLY = False
# SESSION_COOKIE_DOMAIN = os.environ.get('DOMAIN_ORIGIN', 'vekin.co.th')
# CSRF_COOKIE_SAMESITE = "None"


CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

WSGI_APPLICATION = 'co2.wsgi.application'
ASGI_APPLICATION = 'co2.routing.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('redis', 6379)],
        },
    },
}

# Cluster mode
DATABASES_FOR_WRITE = 'default'
DATABASES_FOR_READ = ['default']  # replicate-1, replicate-2

AUTH_USER_MODEL = 'account.Account'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# TODO : setup time and language
LANGUAGES = (
    ('th-th', 'Thai'),
    ('en-us', 'English'),
)

TIME_ZONE = 'Asia/Bangkok'

DATE_FORMAT = '%d %b %Y'
DATE_FORMAT_INDEX = '%Y-%m-%d'
TIME_FORMAT = '%H:%M'
DATETIME_FORMAT = '%e %B %Y %H:%M:%S'
TIMESTAMP_FORMAT = '%Y-%m-%d %H:%M:%S'

USE_I18N = True

USE_L10N = True

USE_TZ = True

SITE_URL = 'http://127.0.0.1:8000'

STATIC_URL = '/backend/static/back/'

MEDIA_URL = '/backend/media/'

DEFAULT_URL = '/backend/default/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

STATIC_ROOT = os.path.join(BASE_DIR, 'deploy_static/')

DEFAULT_ROOT = os.path.join(BASE_DIR, '_data/default/')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static/'),
)

DATA_UPLOAD_MAX_NUMBER_FIELDS = 102400
LOGIN_URL = '/backend/admin/login/'
LOGOUT_URL = '/backend/admin/logout/'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'EXCEPTION_HANDLER': 'utils.rest_framework.exception.exception_handler',

    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer'
    ),

    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'TEST_REQUEST_RENDERER_CLASSES': (
        'rest_framework.renderers.MultiPartRenderer',
        'rest_framework.renderers.JSONRenderer',
    ),
    'PAGE_SIZE': 24,
    # "DATE_INPUT_FORMATS": ["%d/%m/%Y"],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}

# CELERY
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'amqp://rabbitmq2:5672/')
RESULT_BACKEND = os.environ.get('RESULT_BACKEND', 'redis://redis:6379/0')
CELERY_ACKS_LATE = True
FLOWER_PROXY = 'http://0.0.0.0:5555/'
RABBIT_MANAGEMENT_PROXY_URL = 'http://0.0.0.0:15672/'

# Add a one-minute timeout to all Celery tasks.
CELERYD_TASK_SOFT_TIME_LIMIT = 60

CELERY_TIMEZONE = TIME_ZONE
CELERYD_PREFETCH_MULTIPLIER = 1

ROUTER_INCLUDE_ROOT_VIEW = False

SWAGGER_SETTINGS = {
    'IS_ENABLE': True,
    'SHOW_REQUEST_HEADERS': True,
    'IS_SUPERUSER': True,
    'VALIDATOR_URL': None,
}

ENABLE_LOGGING = False
if DEBUG == False:
    ENABLE_LOGGING = True
    SWAGGER_SETTINGS['IS_ENABLE'] = False

_CACHED_CONTENT_TYPE = {}
_CACHED_CONTENT_TYPE_ID = {}
CACHED_CONFIG = {}
CACHED_DICT = {}
CACHED_LOCATION = {}

IS_ENABLE_CONFIG_SETTINGS = True

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'memcached',
    }
}

REDIS = redis.Redis('redis')

# CONFIG
# FILE_UPLOAD_PERMISSIONS = 0o777
SESSION_SAVE_EVERY_REQUEST = True

PROJECT = 'PROJECT'
SUPER_ADMIN_GROUP_ID = 1
DEFAULT_TIMEOUT = 10

IS_HIDE_ADMIN_URL = False

FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800

# MODEL
PASSWORD_MIN = 4

IS_SEND_EMAIL = True
IS_SEND_FCM = True

TESTING = sys.argv[1:2] == ['test']
IS_LOCALHOST = sys.argv[1:2] == ['runserver']
FCM_SERVER_KEY = os.environ.get('FCM_SERVER_KEY', '')

FCM_DJANGO_SETTINGS = {
    # "FCM_SERVER_KEY": FCM_SERVER_KEY,
    "FCM_SERVER_KEY": 'AAAASZJ40Uc:APA91bEwnDuwFAisXZtVcyzgZQWjJw6WVWkIWVM3vbi8dBeR88EPZOkcsnxYcOOXxHT6e_DH5LuiIO_ArCUlKIi1mO6q0kDBMVjjd9OZWCtzA3QcxLGwg1Jr0d3tE2hFs4r1NO_30ukE',
    "ONE_DEVICE_PER_USER": False,
    "DELETE_INACTIVE_DEVICES": False,
}

if TESTING:
    ENABLE_LOGGING = False
    CELERY_TASK_ALWAYS_EAGER = True
    MONGODB_HOST = 'mongo'
    SESSION_ENGINE = 'django.contrib.sessions.backends.db'
    CACHES['default'] = {'BACKEND': 'django.core.cache.backends.dummy.DummyCache', }

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('DB_NAME', ''),
#         'USER': os.environ.get('DB_USER', ''),
#         'PASSWORD': os.environ.get('DB_PASSWORD', ''),
#         'TEST': {
#             'NAME': 'hrd_test',
#         },
#         'HOST': os.environ.get('DB_HOST', ''),
#         'PORT': os.environ.get('DB_PORT', ''),
#     }
# }

from .local_setting import *

EXPLORER_CONNECTIONS = {'default': 'default'}
EXPLORER_DEFAULT_CONNECTION = 'default'

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60)
}

PROMETHEUS_EXPORT_MIGRATIONS = False

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"

BLEACH_ALLOWED_TAGS = [
    'a',
    'em',
    'img',
    'li',
    'ol',
    'p',
    'span',
    'strong',
    'table',
    'tbody',
    'td',
    'tr',
    'ul',
    'div',
    'br',
    'iframe'
]

BLEACH_ALLOWED_ATTRIBUTES = {
    'a': ['href', 'rel', 'target'],
    'img': ['alt', 'height', 'src', 'style', 'width'],
    'li': ['style'],
    'p': ['style'],
    'span': ['style'],
    'table': ['border', 'style'],
    'td': ['style'],
    'tr': ['style'],
    'div': ['style'],
    'iframe': ['height', 'src', 'style', 'width', 'allowfullscreen']
}

BLEACH_ALLOWED_STYLES = [
    'border-collapse',
    'color',
    'display',
    'height',
    'margin-left',
    'margin-right',
    'text-align',
    'text-decoration',
    'width'
]

BLEACH_ALLOWED_PROTOCOLS = [
    'http',
    'https',
    'data',
    'intent'
]

# Logging
LOGGING_MAXBYTES = 1024 * 1024 * 1024  # File size 1GB
LOGGING_BACKUPCOUNT = 10  # x Backup 10 files
LOGGING_INTERVAL = 1  # Every 1 Days
LOGGING_FILE_LOCATION = '/backups/'  # Path log file
LOGGING_LIMIT_TEXT_RESPONSE = 500

LOG_CONFIG = {
    'version': 1,
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s|%(name)s|%(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'celery': {
            'format': '[%(asctime)s] %(levelname)s|%(name)s|%(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/backups/app.log',  # need to have /backups/ dir if don't can't runserver
            'maxBytes': 1024 * 1024 * 1024,
            'backupCount': 2,
            'formatter': 'simple',
        },
        'celery_console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'celery'
        },
        'celery_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/backups/celery.log',  # need to have /backups/ dir if don't can't runserver
            'maxBytes': 1024 * 1024 * 1024,
            'backupCount': 2,
            'formatter': 'celery',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console', 'mail_admins'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['celery_console', 'celery_file', 'mail_admins'],
            'level': 'INFO',
            'propagate': False,
        }
    }
}

# logging
if ENABLE_LOGGING:
    CELERY_WORKER_HIJACK_ROOT_LOGGING = False  # IGNORE celery -l ... use this settings.
    LOGGING = LOG_CONFIG

LOGGING = {
    'version': 1,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        }
    },
    'loggers': {
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['console'],
        }
    }
}

def _content_type(code):
    if code in _CACHED_CONTENT_TYPE:
        return _CACHED_CONTENT_TYPE[code]

    from django.contrib.contenttypes.models import ContentType
    p = code.split('.')
    content_type = ContentType.objects.get(app_label=p[0], model=p[1])
    _CACHED_CONTENT_TYPE[code] = content_type
    return content_type


def _content_type_id(content_type_id):
    if content_type_id == -1 or content_type_id is None:
        return None
    key = '%s' % content_type_id
    if key in _CACHED_CONTENT_TYPE_ID:
        return _CACHED_CONTENT_TYPE_ID[key]
    from django.contrib.contenttypes.models import ContentType
    content_type = ContentType.objects.get(id=content_type_id)
    _CACHED_CONTENT_TYPE_ID[key] = content_type
    return content_type


CONTENT_TYPE = _content_type
CONTENT_TYPE_ID = _content_type_id